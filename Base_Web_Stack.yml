AWSTemplateFormatVersion: 2010-09-09
Description: Create vPC with public and private subnets
Metadata:
  'AWS::CloudFormation::Interface':
    ParameterGroup:
      - Label:
          default: VPC CIDR
        Parameters:
          - VpcCIDR
      - Label:
          default: SubnetCIDR
        Parameters:
          - PublicSubnet1CIDR
          - PublicSubnet2CIDR
          - PrivAppSubnet1CIDR
          - PrivAppSubnet2CIDR
          - PrivDBSubnet1CIDR
          - PrivDBSubnet2CIDR
      - Label:
          default: SSH CIDR
        Parameters:
          - SSHLocation
Parameters:
  VpcCIDR:
    Default: 10.0.0.1/19
    Description: Please enter the CIDR range for this vpc
    Type: String
  PublicSubnet1CIDR:
    Default: 10.0.4.1/22
    Description: Please enter the CIDR range for public subnet 1
    Type: String
  PublicSubnet2CIDR:
    Default: 10.0.8.1/22
    Description: Please enter the CIDR range for public subnet 2
    Type: String
  PrivAppSubnetSubnet1CIDR:
    Default: 10.0.12.1/22
    Description: Please enter the CIDR range for app subnet 1
    Type: String
  PrivAppSubnetSubnet2CIDR:
    Default: 10.0.16.1/22
    Description: Please enter the CIDR range for app subnet 2
    Type: String
  PrivDBSubnetSubnet1CIDR:
    Default: 10.0.20.1/22
    Description: Please enter the CIDR range for db subnet 1
    Type: String
  PrivDBSubnetSubnet2CIDR:
    Default: 10.0.24.1/22
    Description: Please enter the CIDR range for db subnet 2
    Type: String
  SSHLocation:
    Default: 0.0.0.0/0
    Description: The IP address range that can be used to access the web server using SSH.
    MaxLength: 18
    MinLength: 9
    Type: String
Resources:
  TestVPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsHostnames: true
      EnableDnsSupport: true
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: Test VPC
        - Key: ENV
          Value: Test
  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'
    Properties:
      Tags:
        - Key: Name
          Value: Test IGW
  IGWAttachment:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref TestVPC
  PublicSubnet1:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: !Select 
        - 0
        - !GetAZs ''
      CidrBlock: !Ref PublicSubnet1CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: Public-Subnet-1
        - Key: ENV
          Value: Test
      VpcId: !Ref TestVPC
  PublicSubnet2:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: !Select 
        - 1
        - !GetAZs ''
      CidrBlock: !Ref PublicSubnet2CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: Public-Subnet-2
        - Key: ENV
          Value: Test
      VpcId: !Ref TestVPC
  PublicRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      Tags:
        - Key: Name
          Value: PublicRouteTable
        - Key: ENV
          Value: Test
      VpcId: !Ref TestVPC
  PublicRoute:
    Type: 'AWS::EC2::Route'
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
      RouteTableId: !Ref PublicRouteTable
  PublicSubnet1RouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1
  PublicSubnet2RouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2
  PrivAppSubnet1:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: !Select 
        - 0
        - !GetAZs ''
      CidrBlock: !Ref PrivAppSubnetSubnet1CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: Private-App-Subnet-1
        - Key: ENV
          Value: Test
      VpcId: !Ref TestVPC
  PrivAppSubnet2:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: !Select 
        - 1
        - !GetAZs ''
      CidrBlock: !Ref PrivAppSubnetSubnet2CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: Private-App-Subnet-2
        - Key: ENV
          Value: Test
      VpcId: !Ref TestVPC
  PrivDBSubnet1:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: !Select 
        - 0
        - !GetAZs ''
      CidrBlock: !Ref PrivDBSubnetSubnet1CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: Private-DB-Subnet-1
        - Key: ENV
          Value: Test
      VpcId: !Ref TestVPC
  PrivDBSubnet2:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: !Select 
        - 1
        - !GetAZs ''
      CidrBlock: !Ref PrivDBSubnetSubnet2CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: Private-DB-Subnet-2
        - Key: ENV
          Value: Test
      VpcId: !Ref TestVPC
  ALBSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Enable HTTP/HTTPS access on port 80/443
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: ALBSecurityGroup
        - Key: ENV
          Value: Test
      VpcId: !Ref TestVPC
  SSHSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: SSH Security Group
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref SSHLocation
      Tags:
        - Key: Name
          Value: SSH Security Group
      VpcId: !Ref TestVPC
  WebServerSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: >-
        Enable HTTP/HTTPS internet access via port 80/443 from ALB to EC2
        instance
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId: !Ref ALBSecurityGroup
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          SourceSecurityGroupId: !Ref ALBSecurityGroup
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          SourceSecurityGroupId: !Ref SSHSecurityGroup
      Tags:
        - Key: Name
          Value: Webserver Security Group
      VpcId: !Ref TestVPC
  DatabaseSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Allow DB Access
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 1433
          ToPort: 1433
          SourceSecurityGroupId: !Ref WebServerSecurityGroup
      Tags:
        - Key: Name
          Value: DB Security Group
        - Key: ENV
          Value: Test
      VpcId: !Ref TestVPC
  PrivSubnetRouteTableA:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref TestVPC
      Tags:
        - Key: Name
          Value: Priv-Subnet-Route-Table-A
        - Key: ENV
          Value: Test
  PrivSubnetRouteTableB:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref TestVPC
      Tags:
        - Key: Name
          Value: Priv-Subnet-Route-Table-B
        - Key: ENV
          Value: Test
  PrivSubnetRouteTableAAssociation1:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref PrivSubnetRouteTableA
      SubnetId: !Ref PrivAppSubnet1
  PrivSubnetRouteTableAAssociation2:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref PrivSubnetRouteTableA
      SubnetId: !Ref PrivDBSubnet1
  PrivSubnetRouteTableBAssoc1:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref PrivSubnetRouteTableB
      SubnetId: !Ref PrivAppSubnet2
  PrivSubnetRouteTableBAssoc2:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref PrivSubnetRouteTableB
      SubnetId: !Ref PrivDBSubnet2
